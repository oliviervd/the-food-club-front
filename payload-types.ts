/* tslint:disable */
/* eslint-disable */
/**
 * This file was automatically generated by Payload.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:types` to regenerate this file.
 */

/**
 * Supported timezones in IANA format.
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "supportedTimezones".
 */
export type SupportedTimezones =
  | 'Pacific/Midway'
  | 'Pacific/Niue'
  | 'Pacific/Honolulu'
  | 'Pacific/Rarotonga'
  | 'America/Anchorage'
  | 'Pacific/Gambier'
  | 'America/Los_Angeles'
  | 'America/Tijuana'
  | 'America/Denver'
  | 'America/Phoenix'
  | 'America/Chicago'
  | 'America/Guatemala'
  | 'America/New_York'
  | 'America/Bogota'
  | 'America/Caracas'
  | 'America/Santiago'
  | 'America/Buenos_Aires'
  | 'America/Sao_Paulo'
  | 'Atlantic/South_Georgia'
  | 'Atlantic/Azores'
  | 'Atlantic/Cape_Verde'
  | 'Europe/London'
  | 'Europe/Berlin'
  | 'Africa/Lagos'
  | 'Europe/Athens'
  | 'Africa/Cairo'
  | 'Europe/Moscow'
  | 'Asia/Riyadh'
  | 'Asia/Dubai'
  | 'Asia/Baku'
  | 'Asia/Karachi'
  | 'Asia/Tashkent'
  | 'Asia/Calcutta'
  | 'Asia/Dhaka'
  | 'Asia/Almaty'
  | 'Asia/Jakarta'
  | 'Asia/Bangkok'
  | 'Asia/Shanghai'
  | 'Asia/Singapore'
  | 'Asia/Tokyo'
  | 'Asia/Seoul'
  | 'Australia/Brisbane'
  | 'Australia/Sydney'
  | 'Pacific/Guam'
  | 'Pacific/Noumea'
  | 'Pacific/Auckland'
  | 'Pacific/Fiji';

export interface Config {
  auth: {
    users: UserAuthOperations;
  };
  blocks: {};
  collections: {
    users: User;
    cats: Cat;
    media: Media;
    venues: Venue;
    cuisines: Cuisine;
    events: Event;
    recommendations: Recommendation;
    page: Page;
    'payload-locked-documents': PayloadLockedDocument;
    'payload-preferences': PayloadPreference;
    'payload-migrations': PayloadMigration;
  };
  collectionsJoins: {};
  collectionsSelect: {
    users: UsersSelect<false> | UsersSelect<true>;
    cats: CatsSelect<false> | CatsSelect<true>;
    media: MediaSelect<false> | MediaSelect<true>;
    venues: VenuesSelect<false> | VenuesSelect<true>;
    cuisines: CuisinesSelect<false> | CuisinesSelect<true>;
    events: EventsSelect<false> | EventsSelect<true>;
    recommendations: RecommendationsSelect<false> | RecommendationsSelect<true>;
    page: PageSelect<false> | PageSelect<true>;
    'payload-locked-documents': PayloadLockedDocumentsSelect<false> | PayloadLockedDocumentsSelect<true>;
    'payload-preferences': PayloadPreferencesSelect<false> | PayloadPreferencesSelect<true>;
    'payload-migrations': PayloadMigrationsSelect<false> | PayloadMigrationsSelect<true>;
  };
  db: {
    defaultIDType: string;
  };
  globals: {};
  globalsSelect: {};
  locale: 'en' | 'fr' | 'nl';
  user: User & {
    collection: 'users';
  };
  jobs: {
    tasks: unknown;
    workflows: unknown;
  };
}
export interface UserAuthOperations {
  forgotPassword: {
    email: string;
    password: string;
  };
  login: {
    email: string;
    password: string;
  };
  registerFirstUser: {
    email: string;
    password: string;
  };
  unlock: {
    email: string;
    password: string;
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users".
 */
export interface User {
  id: string;
  name?: string | null;
  firstName?: string | null;
  role?: ('superAdmin' | 'admin' | 'editor' | 'user')[] | null;
  updatedAt: string;
  createdAt: string;
  email: string;
  resetPasswordToken?: string | null;
  resetPasswordExpiration?: string | null;
  salt?: string | null;
  hash?: string | null;
  loginAttempts?: number | null;
  lockUntil?: string | null;
  sessions?:
    | {
        id: string;
        createdAt?: string | null;
        expiresAt: string;
      }[]
    | null;
  password?: string | null;
}
/**
 * cats - as in categories. Here we cluster and curate venues
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "cats".
 */
export interface Cat {
  id: string;
  name: string;
  /**
   * slug of the cat
   */
  slug?: string | null;
  /**
   * short description of the cat
   */
  description: string;
  media?: {
    /**
     * main image for the cat
     */
    hero?: (string | null) | Media;
  };
  /**
   * venues in this category
   */
  venues?: {
    venues?: (string | Venue)[] | null;
  };
  url?: string | null;
  meta?: {
    title?: string | null;
    description?: string | null;
    /**
     * Maximum upload file size: 12MB. Recommended file size for images is <500KB.
     */
    image?: (string | null) | Media;
    keywords?: string | null;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media".
 */
export interface Media {
  id: string;
  title: string;
  alt?: string | null;
  /**
   * if a picture of a dish on the menu, describe the dish in one or two sentences. Keep it short!
   */
  dish?: string | null;
  updatedAt: string;
  createdAt: string;
  url?: string | null;
  thumbnailURL?: string | null;
  filename?: string | null;
  mimeType?: string | null;
  filesize?: number | null;
  width?: number | null;
  height?: number | null;
  focalX?: number | null;
  focalY?: number | null;
  sizes?: {
    mobileThumbnail?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
    mobileFriendly?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
    tablet?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
    original?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "venues".
 */
export interface Venue {
  id: string;
  /**
   * name of the venue
   */
  venueName?: string | null;
  /**
   * NO SPACES! USE '-' INSTEAD. - example: 'da-luigi' or 'no-spaces-here'.
   */
  url?: string | null;
  /**
   * the club the venue belongs to (the city it is located in)
   */
  club?: ('brussels' | 'gent' | 'antwerp') | null;
  /**
   * mark this venue as new
   */
  new?: boolean | null;
  /**
   * media for the venue
   */
  media?: {
    /**
     * hero image for the venue
     */
    hero?: (string | null) | Media;
  };
  information?: {
    /**
     * select the type of venue
     */
    type?: ('market' | 'food-truck' | 'shop' | 'restaurant' | 'bar') | null;
    /**
     * select the kitchen/cuisine the venue belongs to, fe. Italian, French, Dutch, ...
     */
    cuisine?: (string | Cuisine)[] | null;
    /**
     * select the dishes the venue serves, fe. Italian, French, Dutch, ...
     */
    dishes?: (string | Cuisine)[] | null;
    drinks?: (string | Cuisine)[] | null;
    serves?: ('breakfast' | 'brunch' | 'lunch' | 'dinner' | 'snack' | 'drinks' | 'coffee')[] | null;
    /**
     * the venue has a terrace
     */
    hasTerrace?: boolean | null;
    orientation?: ('NE' | 'E' | 'SE' | 'S' | 'SW' | 'W' | 'NW' | 'N') | null;
    /**
     * the venue has take away
     */
    takeAway?: boolean | null;
    address?: {
      street?: string | null;
      houseNumber?: string | null;
      city?: string | null;
      postalCode?: string | null;
      longitude?: number | null;
      latitude?: number | null;
    };
    /**
     * this venue is blessed, it only opens when the sun shines ☀️
     */
    sunKissed?: boolean | null;
    hours?:
      | {
          dayOfWeek?: ('monday' | 'tuesday' | 'wednesday' | 'thursday' | 'friday' | 'saturday' | 'sunday') | null;
          isClosed?: boolean | null;
          periods?:
            | {
                openTime?: string | null;
                closeTime?: string | null;
                closeTimeSpecial?: string | null;
                label?: string | null;
                id?: string | null;
              }[]
            | null;
          id?: string | null;
        }[]
      | null;
    /**
     * remarks for the opening hours
     */
    remarks?: string | null;
    /**
     * url to booking service (Resengo or other)
     */
    reservations?: string | null;
  };
  review?: {
    /**
     * review for the venue
     */
    review?: {
      root: {
        type: string;
        children: {
          type: string;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    /**
     * if the food club has an order for it prefers when visiting the venue, enter it here.
     */
    foodClubOrder?: {
      root: {
        type: string;
        children: {
          type: string;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
  };
  meta?: {
    title?: string | null;
    description?: string | null;
    /**
     * Maximum upload file size: 12MB. Recommended file size for images is <500KB.
     */
    image?: (string | null) | Media;
    keywords?: string | null;
  };
  updatedAt: string;
  createdAt: string;
  _status?: ('draft' | 'published') | null;
}
/**
 * collection of kitchens/cuisines/dishes used to type venues (tags)
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "cuisines".
 */
export interface Cuisine {
  id: string;
  name: string;
  /**
   * select the type to which this category belongs
   */
  type: 'drinks' | 'cuisine' | 'dish' | 'shop' | 'style';
  /**
   * write a short wiki-like text that explains what this category is about. This doesn't need to be formal, encyclopedic.
   */
  description?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  /**
   * tick if this category needs to be displayed. - if unticked, the category keeps existing but isn't displayed on the website (homepage).
   */
  active?: boolean | null;
  meta?: {
    title?: string | null;
    description?: string | null;
    /**
     * Maximum upload file size: 12MB. Recommended file size for images is <500KB.
     */
    image?: (string | null) | Media;
    keywords?: string | null;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * Collection of food-related events: festivals, international days, pop-ups, openings, etc.
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "events".
 */
export interface Event {
  id: string;
  name: string;
  /**
   * Unique URL slug for this event.
   */
  slug: string;
  cta?: (string | null) | Recommendation;
  /**
   * Dishes or Cuisines related to this event.
   */
  relatedDishCuisine?: (string | Cuisine)[] | null;
  /**
   * Venues connected to this event.
   */
  relatedToVenue?: (string | Venue)[] | null;
  Information: {
    description: {
      root: {
        type: string;
        children: {
          type: string;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    };
    /**
     * Optional link to an official page, tickets, etc.
     */
    externalLink?: string | null;
    /**
     * Free text location if not linked to a venue.
     */
    location?: string | null;
    tags?: ('Festival' | 'International Day' | 'Pop-up' | 'Opening' | 'Special Menu' | 'Market' | 'Workshop')[] | null;
    /**
     * Check if this event repeats (e.g., every year).
     */
    repeats?: boolean | null;
    /**
     * Start date for one-off event.
     */
    startDate?: string | null;
    /**
     * End date (optional).
     */
    endDate?: string | null;
    /**
     * hour when the event starts
     */
    startTime?: string | null;
    /**
     * hour when the event ends
     */
    endTime?: string | null;
    /**
     * Choose how often it repeats.
     */
    frequency?: ('yearly' | 'monthly' | 'weekly') | null;
    /**
     * Month for yearly events.
     */
    month?:
      | (
          | 'January'
          | 'February'
          | 'March'
          | 'April'
          | 'May'
          | 'June'
          | 'July'
          | 'August'
          | 'September'
          | 'October'
          | 'November'
          | 'December'
        )
      | null;
    /**
     * Day of month for yearly or monthly events.
     */
    day?: number | null;
    /**
     * Days of the week for weekly repeats.
     */
    every?: ('Monday' | 'Tuesday' | 'Wednesday' | 'Thursday' | 'Friday' | 'Saturday' | 'Sunday')[] | null;
  };
  Media: {
    heroImage: string | Media;
  };
  meta?: {
    title?: string | null;
    description?: string | null;
    /**
     * Maximum upload file size: 12MB. Recommended file size for images is <500KB.
     */
    image?: (string | null) | Media;
    keywords?: string | null;
  };
  updatedAt: string;
  createdAt: string;
  _status?: ('draft' | 'published') | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "recommendations".
 */
export interface Recommendation {
  id: string;
  title: string;
  /**
   * call to action fo the recommendation
   */
  cta: string;
  /**
   * cuisines related to the recommendation
   */
  cuisines?: (string | Cuisine)[] | null;
  /**
   * venues related to the recommendation
   */
  venues?: (string | Venue)[] | null;
  /**
   * recommendations related to the weather
   */
  weather?: {
    matrix?:
      | {
          weatherCondition?: ('sunny' | 'rainy' | 'cloudy') | null;
          min?: number | null;
          max?: number | null;
          timeSlots?: {
            morning?: string | null;
            afternoon?: string | null;
            evening?: string | null;
          };
          id?: string | null;
        }[]
      | null;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "page".
 */
export interface Page {
  id: string;
  /**
   * slug (url) of the page
   */
  slug: string;
  title: string;
  content?:
    | (
        | {
            content?: {
              root: {
                type: string;
                children: {
                  type: string;
                  version: number;
                  [k: string]: unknown;
                }[];
                direction: ('ltr' | 'rtl') | null;
                format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
                indent: number;
                version: number;
              };
              [k: string]: unknown;
            } | null;
            image?: (string | null) | Media;
            textPosition?: ('left' | 'right') | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'contentWithMedia';
          }
        | {
            /**
             * rule number (f.e #1)
             */
            ruleNumber: string;
            /**
             * rule
             */
            rule: {
              root: {
                type: string;
                children: {
                  type: string;
                  version: number;
                  [k: string]: unknown;
                }[];
                direction: ('ltr' | 'rtl') | null;
                format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
                indent: number;
                version: number;
              };
              [k: string]: unknown;
            };
            id?: string | null;
            blockName?: string | null;
            blockType: 'foodClubRule';
          }
        | {
            image?: (string | null) | Media;
            caption?: string | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'heroImage';
          }
        | {
            text?: {
              root: {
                type: string;
                children: {
                  type: string;
                  version: number;
                  [k: string]: unknown;
                }[];
                direction: ('ltr' | 'rtl') | null;
                format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
                indent: number;
                version: number;
              };
              [k: string]: unknown;
            } | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'textBlock';
          }
      )[]
    | null;
  meta?: {
    title?: string | null;
    description?: string | null;
    /**
     * Maximum upload file size: 12MB. Recommended file size for images is <500KB.
     */
    image?: (string | null) | Media;
    keywords?: string | null;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents".
 */
export interface PayloadLockedDocument {
  id: string;
  document?:
    | ({
        relationTo: 'users';
        value: string | User;
      } | null)
    | ({
        relationTo: 'cats';
        value: string | Cat;
      } | null)
    | ({
        relationTo: 'media';
        value: string | Media;
      } | null)
    | ({
        relationTo: 'venues';
        value: string | Venue;
      } | null)
    | ({
        relationTo: 'cuisines';
        value: string | Cuisine;
      } | null)
    | ({
        relationTo: 'events';
        value: string | Event;
      } | null)
    | ({
        relationTo: 'recommendations';
        value: string | Recommendation;
      } | null)
    | ({
        relationTo: 'page';
        value: string | Page;
      } | null);
  globalSlug?: string | null;
  user: {
    relationTo: 'users';
    value: string | User;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences".
 */
export interface PayloadPreference {
  id: string;
  user: {
    relationTo: 'users';
    value: string | User;
  };
  key?: string | null;
  value?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations".
 */
export interface PayloadMigration {
  id: string;
  name?: string | null;
  batch?: number | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users_select".
 */
export interface UsersSelect<T extends boolean = true> {
  name?: T;
  firstName?: T;
  role?: T;
  updatedAt?: T;
  createdAt?: T;
  email?: T;
  resetPasswordToken?: T;
  resetPasswordExpiration?: T;
  salt?: T;
  hash?: T;
  loginAttempts?: T;
  lockUntil?: T;
  sessions?:
    | T
    | {
        id?: T;
        createdAt?: T;
        expiresAt?: T;
      };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "cats_select".
 */
export interface CatsSelect<T extends boolean = true> {
  name?: T;
  slug?: T;
  description?: T;
  media?:
    | T
    | {
        hero?: T;
      };
  venues?:
    | T
    | {
        venues?: T;
      };
  url?: T;
  meta?:
    | T
    | {
        title?: T;
        description?: T;
        image?: T;
        keywords?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media_select".
 */
export interface MediaSelect<T extends boolean = true> {
  title?: T;
  alt?: T;
  dish?: T;
  updatedAt?: T;
  createdAt?: T;
  url?: T;
  thumbnailURL?: T;
  filename?: T;
  mimeType?: T;
  filesize?: T;
  width?: T;
  height?: T;
  focalX?: T;
  focalY?: T;
  sizes?:
    | T
    | {
        mobileThumbnail?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
        mobileFriendly?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
        tablet?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
        original?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
      };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "venues_select".
 */
export interface VenuesSelect<T extends boolean = true> {
  venueName?: T;
  url?: T;
  club?: T;
  new?: T;
  media?:
    | T
    | {
        hero?: T;
      };
  information?:
    | T
    | {
        type?: T;
        cuisine?: T;
        dishes?: T;
        drinks?: T;
        serves?: T;
        hasTerrace?: T;
        orientation?: T;
        takeAway?: T;
        address?:
          | T
          | {
              street?: T;
              houseNumber?: T;
              city?: T;
              postalCode?: T;
              longitude?: T;
              latitude?: T;
            };
        sunKissed?: T;
        hours?:
          | T
          | {
              dayOfWeek?: T;
              isClosed?: T;
              periods?:
                | T
                | {
                    openTime?: T;
                    closeTime?: T;
                    closeTimeSpecial?: T;
                    label?: T;
                    id?: T;
                  };
              id?: T;
            };
        remarks?: T;
        reservations?: T;
      };
  review?:
    | T
    | {
        review?: T;
        foodClubOrder?: T;
      };
  meta?:
    | T
    | {
        title?: T;
        description?: T;
        image?: T;
        keywords?: T;
      };
  updatedAt?: T;
  createdAt?: T;
  _status?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "cuisines_select".
 */
export interface CuisinesSelect<T extends boolean = true> {
  name?: T;
  type?: T;
  description?: T;
  active?: T;
  meta?:
    | T
    | {
        title?: T;
        description?: T;
        image?: T;
        keywords?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "events_select".
 */
export interface EventsSelect<T extends boolean = true> {
  name?: T;
  slug?: T;
  cta?: T;
  relatedDishCuisine?: T;
  relatedToVenue?: T;
  Information?:
    | T
    | {
        description?: T;
        externalLink?: T;
        location?: T;
        tags?: T;
        repeats?: T;
        startDate?: T;
        endDate?: T;
        startTime?: T;
        endTime?: T;
        frequency?: T;
        month?: T;
        day?: T;
        every?: T;
      };
  Media?:
    | T
    | {
        heroImage?: T;
      };
  meta?:
    | T
    | {
        title?: T;
        description?: T;
        image?: T;
        keywords?: T;
      };
  updatedAt?: T;
  createdAt?: T;
  _status?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "recommendations_select".
 */
export interface RecommendationsSelect<T extends boolean = true> {
  title?: T;
  cta?: T;
  cuisines?: T;
  venues?: T;
  weather?:
    | T
    | {
        matrix?:
          | T
          | {
              weatherCondition?: T;
              min?: T;
              max?: T;
              timeSlots?:
                | T
                | {
                    morning?: T;
                    afternoon?: T;
                    evening?: T;
                  };
              id?: T;
            };
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "page_select".
 */
export interface PageSelect<T extends boolean = true> {
  slug?: T;
  title?: T;
  content?:
    | T
    | {
        contentWithMedia?:
          | T
          | {
              content?: T;
              image?: T;
              textPosition?: T;
              id?: T;
              blockName?: T;
            };
        foodClubRule?:
          | T
          | {
              ruleNumber?: T;
              rule?: T;
              id?: T;
              blockName?: T;
            };
        heroImage?:
          | T
          | {
              image?: T;
              caption?: T;
              id?: T;
              blockName?: T;
            };
        textBlock?:
          | T
          | {
              text?: T;
              id?: T;
              blockName?: T;
            };
      };
  meta?:
    | T
    | {
        title?: T;
        description?: T;
        image?: T;
        keywords?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents_select".
 */
export interface PayloadLockedDocumentsSelect<T extends boolean = true> {
  document?: T;
  globalSlug?: T;
  user?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences_select".
 */
export interface PayloadPreferencesSelect<T extends boolean = true> {
  user?: T;
  key?: T;
  value?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations_select".
 */
export interface PayloadMigrationsSelect<T extends boolean = true> {
  name?: T;
  batch?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "auth".
 */
export interface Auth {
  [k: string]: unknown;
}


declare module 'payload' {
  export interface GeneratedTypes extends Config {}
}